package cmd

import (
	"fmt"
	"os"

	"github.com/AlecAivazis/survey/v2"
	"github.com/altopm/alto/errors"
	"github.com/altopm/alto/utils"
	"github.com/spf13/cobra"
)

var initCommand = &cobra.Command{
	Use:     "init",
	Short:   "Initialize a new project",
	Long:    `Initialize a new project to be published to the alto registry, using "sudo alto publish -now"`,
	Example: "sudo alto init altopm",
	Run: func(cmd *cobra.Command, args []string) {
		initPackage(args[0])
	},
}
<<<<<<< Updated upstream
var qs = []*survey.Question{
=======
var resps = []*survey.Question{
>>>>>>> Stashed changes
	{
		Name: "furtherConfig",
		Prompt: &survey.Select{
			Message: "Any further configuration? (e.g. a shellfile to set the user's OS in a config file)",
			Options: []string{"no", "yes"},
			Default: "yes",
		},
	},
}

func initPackage(packageTitle string) {
	respsAns := struct {
		Deps string `survey:"deps"`
	}{}
	err := survey.Ask(resps, &respsAns)
	deps := utils.SplitString(respsAns.Deps, " ")
	if err != nil {
		errors.Handle(err.Error())
		os.Exit(1)
	}
	initWheel := utils.Loader("%s Initializing...")
	initWheel.Start()
	if err != nil {
		errors.Handle(err.Error())
	}
	for i := 0; i < 4; i++ {
		err := os.MkdirAll(fmt.Sprintf("/var/alto/tmp/%s", packageTitle), 0755)
		if err != nil {
			initWheel.Stop()
			errors.Handle(err.Error())
		}
	}
	for i := 0; i < 2; i++ {
		err := os.RemoveAll(fmt.Sprintf("/var/alto/tmp/%s", packageTitle))
		if err != nil {
			initWheel.Stop()
			errors.Handle(err.Error())
		}
	}
	err = os.MkdirAll(".alton", 0755)
	if err != nil {
		initWheel.Stop()
		errors.Handle(err.Error())
	}
	initfile, err := os.Create("./.alton/alto.json")
	if err != nil {
		initWheel.Stop()
		errors.Handle(err.Error())
	}
	defer initfile.Close()
	if qsAns.FurtherConfig == "yes" {
		initfileWheel := utils.Loader("%s Creating initfile")
		initfileWheel.Start()
		initfiles, err := os.Create("./.alton/init.sh")
		if err != nil {
			initfileWheel.Stop()
			errors.Handle("Can't create initfile! Did you run as sudo?")
			os.Exit(1)
		}
		defer initfiles.Close()
		fmt.Fprintln(initfiles, fmt.Sprint("# This initfile was autogenerated by the alto CLI. You can \n# run any command on the user's machine. If you no longer\n# need this file, just delete it and run sudo alto publish"))
		initfileWheel.Stop()
		utils.MessageNeutral("You might want to read the docs at https://docs.altopkg.com/initfiles")
		utils.MessageSuccess("Initfile created!")
	}
	// this might actually be worse then regexp
	_, err = fmt.Fprintln(initfile, fmt.Sprintf("{\n\t\"title\": \"%s\"\n}", packageTitle))
	if err != nil {
		initWheel.Stop()
		errors.Handle(err.Error())
		os.Exit(1)
	}
	initWheel.Stop()
	utils.MessageSuccess(fmt.Sprintf("%s initialized successfully", packageTitle))
	utils.MessageNeutral("We strongly suggest adding .alton directory to your .gitignore")
}
func init() {
	rootCmd.AddCommand(initCommand)
}
